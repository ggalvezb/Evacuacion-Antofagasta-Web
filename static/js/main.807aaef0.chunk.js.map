{"version":3,"sources":["components/landingpage.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landingpage","style","width","margin","col","height","src","frameborder","allowFullScreen","Component","Main","exact","path","component","App","className","title","textDecoration","color","to","scroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA8BeA,G,8KAvBP,OACI,yBAAKC,MAAO,CAACC,MAAO,MAAOC,OAAQ,SACnC,kBAAC,OAAD,KACI,kBAAC,OAAD,CAAMC,IAAK,IACP,qEAEJ,kBAAC,OAAD,CAAMA,IAAM,IACZ,4BAAQF,MAAM,MAAMG,OAAO,MAAMC,IAAI,sJAAsJC,YAAY,IAAIC,gBAAgB,WAI/N,kBAAC,OAAD,KACI,kBAAC,OAAD,CAAMJ,IAAK,IACP,0DAEJ,kBAAC,OAAD,CAAMA,IAAM,IACZ,4BAAQF,MAAM,MAAMG,OAAO,MAAMC,IAAI,sJAAsJC,YAAY,IAAIC,gBAAgB,gB,GAlBjNC,cCSXC,EARF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,+BAA+BC,UAAWb,IACtD,kBAAC,IAAD,CAAOY,KAAK,eAAeC,UAAWb,M,QCqB/Bc,MAxBf,WAEE,OACF,yBAAKC,UAAU,oBACX,kBAAC,SAAD,KACI,kBAAC,SAAD,CAAQA,UAAU,eAAeC,MAAO,kBAAC,IAAD,CAAMf,MAAO,CAACgB,eAAe,OAAOC,MAAM,SAASC,GAAG,KAAtD,mDAA+GC,QAAM,GACzJ,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMD,GAAG,gBAAT,YAGR,kBAAC,SAAD,CAAQH,MAAM,QACV,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMG,GAAG,gBAAT,YAGR,kBAAC,UAAD,KACI,yBAAKJ,UAAU,iBACf,kBAAC,EAAD,UCZQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCRNC,IAASC,OACP,kBAAC,IAAD,KACA,kBAAC,EAAD,OAGCC,SAASC,eAAe,SDoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.807aaef0.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Grid, Cell} from 'react-mdl';\r\nimport Report from 'powerbi-report-component';\r\n\r\n\r\nclass Landingpage extends Component{\r\n    render(){\r\n        return(\r\n            <div style={{width: '90%', margin: 'auto'}}>\r\n            <Grid> \r\n                <Cell col={12}>\r\n                    <h1>Resultados Población sintética</h1>\r\n                </Cell>\r\n                <Cell col ={12}>\r\n                <iframe width=\"800\" height=\"600\" src=\"https://app.powerbi.com/view?r=eyJrIjoiODI4Y2E5ZTQtNjU1ZC00YmEyLWI3NTEtYmY2ZjdhZGYyMDAzIiwidCI6IjdjZjBmMGRjLTZjNzctNDBhZi1hZmNlLWQwZWY2ZjU2YzJlYiJ9\" frameborder=\"0\" allowFullScreen=\"true\"></iframe>\r\n                </Cell>\r\n            </Grid>\r\n\r\n            <Grid>\r\n                <Cell col={12}>\r\n                    <h1>Resultados Simulación </h1>\r\n                </Cell>\r\n                <Cell col ={12}>\r\n                <iframe width=\"800\" height=\"600\" src=\"https://app.powerbi.com/view?r=eyJrIjoiMzhiMTZlY2YtODc5YS00MDgxLThlMjctNGNlYzIyODU1NDJmIiwidCI6IjdjZjBmMGRjLTZjNzctNDBhZi1hZmNlLWQwZWY2ZjU2YzJlYiJ9\" frameborder=\"0\" allowFullScreen=\"true\"></iframe>  \r\n                </Cell>              \r\n            </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Landingpage;","import React from 'react';\r\nimport { Switch,Route } from 'react-router-dom';\r\nimport Landingpage from './landingpage';\r\n\r\n\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Landingpage}/>\r\n        <Route path=\"/Evacuacion-Antofagasta-Web/\" component={Landingpage}/>\r\n        <Route path=\"/landingpage\" component={Landingpage}/>\r\n    </Switch>\r\n)\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\nimport Main from './components/main';\nimport {Link} from 'react-router-dom';\n\n\nfunction App() {\n\n  return (\n<div className=\"demo-big-content\">\n    <Layout>\n        <Header className='header-color' title={<Link style={{textDecoration:'none',color:'white'}}to='/'>Resultados Simulacion Evacuación Antofagasta</Link>} scroll>\n            <Navigation>\n                <Link to=\"/landingpage\">Inicio</Link>\n            </Navigation>\n        </Header>\n        <Drawer title=\"Menu\">\n            <Navigation>\n                <Link to=\"/landingpage\">Inicio</Link>\n            </Navigation>\n        </Drawer>\n        <Content>\n            <div className=\"page-content\" />\n            <Main/>\n        </Content>\n    </Layout>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport {BrowserRouter} from 'react-router-dom'; \n\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n  </BrowserRouter>\n\n , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}